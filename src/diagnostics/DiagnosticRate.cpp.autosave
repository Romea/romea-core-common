#include "romea_common/diagnostic/DiagnosticRate.hpp"
#include <sstream>

namespace romea {

//-----------------------------------------------------------------------------
DiagnosticRate::DiagnosticRate(const std::string &name,
                               const double & minimalRate,
                               const double & espilon):
  rateMonitoring_(minimalRate),
  minimalRate_(minimalRate),
  epsilon_(espilon),
  report_()
{
  report_.info[name+"_rate"]="";
  report_.messages.push_back(Diagnostic());
}


//-----------------------------------------------------------------------------
DiagnosticStatus DiagnosticRate::evaluate(const Duration & stamp)
{
  double rate=rateMonitoring_.update(stamp);

  if(rate > minimalRate_-epsilon_)
  {
    setMessage_(DiagnosticStatus::OK," is OK.");
  }
  else
  {
    setMessage_(DiagnosticStatus::OK," is too low.");
  }

  setRateValue_();
  return report_.messages.front().status;
}

//-----------------------------------------------------------------------------
const DiagnosticReport & DiagnosticRate::getReport()const
{
  return report_;
}

//-----------------------------------------------------------------------------
void DiagnosticRate::setMessage_(const DiagnosticStatus & status,
                                 const std::string & diagnosticEnd)
{
  Diagnostic & message = report_.messages.front();
  message.message = report_.info.begin()->first + diagnosticEnd;
  message.status = status;
}

//-----------------------------------------------------------------------------
void DiagnosticRate::setRateValue_()
{
  report_.info.begin()->second=toStringInfoValue(rateMonitoring_.getRate());
}

}// namespace



