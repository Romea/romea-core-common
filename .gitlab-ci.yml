# cache:
#   paths:
#     - ccache/

# melodic_catkin_tests:
#   image: ros:melodic-robot
#   stage: build
#   before_script:
#    - apt update >/dev/null && apt install -y git >/dev/null
#    - git clone https://gitlab.com/VictorLamoine/ros_gitlab_ci.git
#    - source ros_gitlab_ci/gitlab-ci.bash >/dev/null
#    - apt-get install -y -qq libgtest-dev
#    - (cd /usr/src/gtest; cmake . && make && cp *.a /usr/lib/)
#   script:
#    - catkin build romea_core_common --cmake-args -DBUILD_TESTS=ON
#    - cd build/romea_core_common
#    - GTEST_COLOR=1 ctest --output-on-failure

before_script:
  # Install ssh-agent if not already installed, it is required by Docker.
  - "apt-get -qq update -y"
  - "apt-get -qq install git build-essential openssh-client python3-vcstool sudo -y"
  # Run ssh-agent (inside the build environment)
  - eval $(ssh-agent -s)
  # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  - ssh-add <(echo "$SSH_PRIVATE_KEY")
  # For Docker builds disable host key checking. Be aware that by adding that
  # you are suspectible to man-in-the-middle attacks.
  # WARNING: Use this only with the Docker executor, if you use it with shell
  # you will overwrite your user's SSH config.
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  # create workspace
  - rm -rf ${CI_PROJECT_DIR}/workspace/src >/dev/null 2>&1
  - mkdir -p ${CI_PROJECT_DIR}/workspace/src
  - cd ${CI_PROJECT_DIR}/workspace
  - vcs import src < ${CI_PROJECT_DIR}/${CI_PROJECT_NAME}.repos
  - rosdep install --from-paths src --ignore-src -y --as-root apt:false

# noetic
noetic_catkin_build:
  image: ros:noetic-robot
  stage: build
  script:
    - catkin build romea_core_common --cmake-args -DBUILD_TESTS=ON
    - cd build/romea_core_common
    - GTEST_COLOR=1 ctest --output-on-failure

# galatic
galactic_focal_build:
  image: ros:galactic-ros-base-focal
  stage: build
  script:
    - colcon build --cmake-args -DBUILD_TESTS=ON
    - cd build/romea_core_common
    - GTEST_COLOR=1 ctest --output-on-failure

# galatic
humble_jammy_build:
  image: ros:humble-ros-base-jammy
  stage: build
  script:
    - colcon build --cmake-args -DBUILD_TESTS=ON
    - cd build/romea_core_common
    - GTEST_COLOR=1 ctest --output-on-failure
